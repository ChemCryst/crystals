name: CI

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        cl: [gui, nogui]
# Do not build linux gui, yet.
#        exclude:
#        - os: ubuntu-latest
#          cl: gui

    steps:
    - name: Checkout crystals
      uses: actions/checkout@v1
#
# WIN only
    - name: Setup MSYS2 environment
      uses: numworks/setup-msys2@v1
      if: matrix.os == 'windows-latest'
      with:
        msystem: MINGW64
# WIN ONLY
    - name: Install MinGW compiler and tools
      if: matrix.os == 'windows-latest'
      run: msys2do pacman --noconfirm -S mingw-w64-x86_64-toolchain mingw-w64-x86_64-openblas mingw-w64-x86_64-perl msys2-w32api-runtime mingw-w64-x86_64-curl
# LINUX ONLY
    - name: Install Ubuntu compiler and tools
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y gfortran libopenblas-dev
# LINUX ONLY
    - name: Install Ubuntu wxWidgets
      if: matrix.os == 'ubuntu-latest' && matrix.cl == 'gui'
      run: |
        sudo apt-key adv --fetch-keys http://repos.codelite.org/CodeLite.asc
        sudo apt-add-repository 'deb http://repos.codelite.org/wx3.1.0/ubuntu/ artful universe'
        sudo apt-get update
        sudo apt-get install -y libwxbase3.1-0-unofficial libwxbase3.1-dev libwxgtk3.1-0-unofficial libwxgtk3.1-dev wx3.1-headers wx-common libwxgtk-webview3.1-0-unofficial libwxgtk-webview3.1-dev libwxgtk-media3.1-0-unofficial libwxgtk-media3.1-dev libwxbase3.1-0-unofficial-dbg libwxgtk3.1-0-unofficial-dbg libwxgtk-webview3.1-0-unofficial-dbg libwxgtk-media3.1-0-unofficial-dbg wx3.1-i18n wx3.1-examples
#
# Install wxWidgets - win GUI only
#
    - name: Setup wxWidgets for Win64 gui
      if: matrix.os == 'windows-latest' && matrix.cl == 'gui'
      shell: cmd
      run: |
        curl -LsS https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxMSW-3.1.3_gcc810_x64_Dev.7z > dev.7z
        curl -LsS https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxWidgets-3.1.3-headers.7z > head.7z
        7z x dev.7z -owx -y
        7z x head.7z -owx -y
        dir
#
    - name: Create build folder
      run: mkdir ci
#
# Build WIN / NOGUI
#
    - name: Build CRYSTALS win64 nogui
      working-directory: ci
      if: matrix.os == 'windows-latest' && matrix.cl == 'nogui'
      run: |
        $env:Path = "D:\a\_temp\msys\\msys64\mingw64\bin;$env:Path"
        cmake .. -G"MinGW Makefiles" -DuseGUI=no -DMINGW=1 -DCMAKE_SH="CMAKE_SH-NOTFOUND"
        mingw32-make -j2
        del ..\test_suite\gui.tst
        echo "::set-env name=COMPCODE::MIN64GH"
#        echo "::set-env name=CRYSDIR::.\,..\ci\"
#        echo "::add-path D:\a\_temp\msys\msys64\mingw64\bin;..\wx\lib\gcc810_x64_dll;"
#
# Build WIN / GUI
#
    - name: Build CRYSTALS win64, gui
      working-directory: ci
      if: matrix.os == 'windows-latest' && matrix.cl == 'gui'
      shell: cmd
      run: |
        set PATH=D:\a\_temp\msys\msys64\mingw64\bin;%PATH%
        cmake .. -G"MinGW Makefiles" -DuseGUI=yes -DMINGW=1 -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DwxWidgets_ROOT_DIR=..\wx -DwxWidgets_LIB_DIR=..\wx\lib\gcc810_x64_dll -DwxWidgets_CONFIGURATION=mswu || echo Try again
        cmake .. -G"MinGW Makefiles" -DuseGUI=yes -DMINGW=1 -DCMAKE_SH="CMAKE_SH-NOTFOUND" -DwxWidgets_ROOT_DIR=..\wx -DwxWidgets_LIB_DIR=..\wx\lib\gcc810_x64_dll -DwxWidgets_CONFIGURATION=mswu
        mingw32-make -j2
        echo ::set-env name=COMPCODE::MIN64GHGUI
#        echo ::add-path D:\a\_temp\msys\msys64\mingw64\bin;..\wx\lib\gcc810_x64_dll;
#
# Build LINUX / NOGUI
#
    - name: Build CRYSTALS linux, nogui
      working-directory: ci
      if: matrix.os == 'ubuntu-latest' && matrix.cl == 'nogui'
      run: |
        cmake -DuseGUI=off -DuseOPENMP=no  ..
        make -j2
        rm ../test_suite/gui.tst
        echo "::set-env name=COMPCODE::LINUXGH"
        echo "::set-env name=CRYSDIR::./,../ci/"
#
# Build LINUX / GUI
#
    - name: Build CRYSTALS linux, gui
      working-directory: ci
      if: matrix.os == 'ubuntu-latest' && matrix.cl == 'gui'
      run: |
        cmake -DuseGUI=on -DuseOPENMP=no  ..
        make -j2
        rm ../test_suite/gui.tst
        echo "::set-env name=COMPCODE::LINUXGHGUI"
        echo "::set-env name=CRYSDIR::./,../ci/"
#
    - name: Test CRYSTALS windows
      working-directory: test_suite
      if: matrix.os == 'windows-latest'
      shell: cmd
# Prevent interactive scripts from running
# Prevent gui test from running for this cl version
# Setup environment
# Compcode sets folder with reference test outputs
# Go
      run: |
        set CRYSDIR=.\,..\ci\
        set PATH=D:\a\_temp\msys\msys64\mingw64\bin;..\wx\lib\gcc810_x64_dll;%path%
        echo PATH is %PATH%
        echo CRYSDIR is %CRYSDIR%
        mkdir script
        mkdir testartifacts
        echo "%SCRIPT NONE" > script\\tipauto.scp
        echo "%END SCRIPT" >> script\\tipauto.scp
        echo "%SCRIPT NONE" > script\\guideauto.scp
        echo "%END SCRIPT" >> script\\guideauto.scp
        perl testsuite.pl
#
    - name: Test CRYSTALS linux no gui
      working-directory: test_suite
      if: matrix.os == 'ubuntu-latest' && matrix.cl == 'nogui'
# Prevent interactive scripts from running
# Prevent gui test from running for this cl version
# Setup environment
# Compcode sets folder with reference test outputs
# Go
      run: |
        mkdir script
        mkdir testartifacts
        echo CRYSDIR is $CRYSDIR
        echo PATH is $PATH
        echo "%SCRIPT NONE" > script/tipauto.scp
        echo "%END SCRIPT" >> script/tipauto.scp
        echo "%SCRIPT NONE" > script/guideauto.scp
        echo "%END SCRIPT" >> script/guideauto.scp
        perl testsuite.pl
#
#
#
    - name: Test CRYSTALS linux gui
      working-directory: test_suite
      if: matrix.os == 'ubuntu-latest' && matrix.cl == 'gui'
# Prevent interactive scripts from running
# Prevent gui test from running for this cl version
# Setup environment
# Compcode sets folder with reference test outputs
# Go
      timeout-minutes: 30
      run: |
        mkdir script
        mkdir testartifacts
        echo CRYSDIR is $CRYSDIR
        echo PATH is $PATH
        echo "%SCRIPT NONE" > script/tipauto.scp
        echo "%END SCRIPT" >> script/tipauto.scp
        echo "%SCRIPT NONE" > script/guideauto.scp
        echo "%END SCRIPT" >> script/guideauto.scp
        xvfb-run -a perl testsuite.pl
#
# If failures, save the test outputs for later comparisons
    - name: Upload crystals test outputs
      uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: test-outputs
        path: test_suite
