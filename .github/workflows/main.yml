name: CI

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        cl: [gui, nogui]
        release: [debug, release]
#        os: [ubuntu-latest]
#        cl: [gui]
#Exclude for testing.
        include:
# Setup some OS specific variables
        - os: ubuntu-latest
          oscode: ubuntu
          crysdir: ./,../ci/
          testprefix: LINUXGH
        - os: windows-latest
          oscode: win64
          crysdir: .\,..\ci\
          testprefix: MIN64GH
# Setup some GUI/NOGUI specific variables
        - cl: gui
          guiflag: yes
          testsuffix: GUI
        - cl: nogui
          guiflag: no
          testsuffix:
# Setup some OS + GUI specific variables
        - os: ubuntu-latest
          cl: nogui
          removeguitst: rm gui.tst
          fbrunner:
        - os: ubuntu-latest
          cl: gui
          removeguitst:
          fbrunner: xvfb-run -a
        - os: windows-latest
          cl: nogui
          removeguitst: del gui.tst
          wxoptions:
        - os: windows-latest
          cl: gui
          removeguitst:
          wxoptions: -DwxWidgets_ROOT_DIR=..\wx -DwxWidgets_LIB_DIR=..\wx\lib\gcc810_x64_dll -DwxWidgets_CONFIGURATION=mswu
        - release: debug
          testoption: -s
        - release: release
          testoption:
       
    steps:
    - name: Checkout crystals
      uses: actions/checkout@v1
#
# WIN only
    - name: Setup MSYS2 environment
      uses: numworks/setup-msys2@v1
      if: matrix.os == 'windows-latest'
      with:
        msystem: MINGW64

# WIN ONLY
    - name: Install MinGW compiler and tools
      if: matrix.os == 'windows-latest'
      run: msys2do pacman --noconfirm -S mingw-w64-x86_64-toolchain mingw-w64-x86_64-openblas mingw-w64-x86_64-perl msys2-w32api-runtime mingw-w64-x86_64-curl

# LINUX ONLY
    - name: Install Ubuntu compiler and tools
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y gfortran libopenblas-dev

# LINUX ONLY
    - name: Install Ubuntu wxWidgets
      if: matrix.os == 'ubuntu-latest' && matrix.cl == 'gui'
      run: |
        sudo apt-key adv --fetch-keys http://repos.codelite.org/CodeLite.asc
        sudo apt-add-repository 'deb http://repos.codelite.org/wx3.1.0/ubuntu/ artful universe'
        sudo apt-get update
        sudo apt-get install -y libwxbase3.1-0-unofficial libwxbase3.1-dev libwxgtk3.1-0-unofficial libwxgtk3.1-dev wx3.1-headers wx-common libwxgtk-webview3.1-0-unofficial libwxgtk-webview3.1-dev libwxgtk-media3.1-0-unofficial libwxgtk-media3.1-dev libwxbase3.1-0-unofficial-dbg libwxgtk3.1-0-unofficial-dbg libwxgtk-webview3.1-0-unofficial-dbg libwxgtk-media3.1-0-unofficial-dbg wx3.1-i18n wx3.1-examples

# Install wxWidgets - win GUI only
#
    - name: Setup wxWidgets for Win64 gui
      if: matrix.os == 'windows-latest' && matrix.cl == 'gui'
      shell: cmd
      run: |
        curl -LsS https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxMSW-3.1.3_gcc810_x64_Dev.7z > dev.7z
        curl -LsS https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxWidgets-3.1.3-headers.7z > head.7z
        7z x dev.7z -owx -y
        7z x head.7z -owx -y
        dir
#
    - name: Create build folder
      run: mkdir ci

# Build WIN64
#
    - name: Build CRYSTALS win64
      working-directory: ci
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        set PATH=D:\a\_temp\msys\msys64\mingw64\bin;%PATH%
        cmake .. -G"MinGW Makefiles" -DuseGUI=${{ matrix.guiflag }} -DMINGW=1 -DCMAKE_SH="CMAKE_SH-NOTFOUND" ${{ matrix.wxoptions }} -DCMAKE_RELEASE_TYPE = ${{ matrix.release }} || echo Try again
        cmake .. -G"MinGW Makefiles" -DuseGUI=${{ matrix.guiflag }} -DMINGW=1 -DCMAKE_SH="CMAKE_SH-NOTFOUND" ${{ matrix.wxoptions }} -DCMAKE_RELEASE_TYPE = ${{ matrix.release }}
        mingw32-make -j2
#
# Build LINUX
#
    - name: Build CRYSTALS linux
      working-directory: ci
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -DuseGUI=${{ matrix.guiflag }} -DuseOPENMP=no  -DCMAKE_RELEASE_TYPE = ${{ matrix.release }} ..
        make -j2

# Tests
    - name: Test CRYSTALS windows
      working-directory: test_suite
      if: matrix.os == 'windows-latest'
      shell: cmd
# Prevent interactive scripts from running
# Prevent gui test from running for this cl version
# Setup environment
# Compcode sets folder with reference test outputs
# Go
      run: |
        set CRYSDIR=${{ matrix.crysdir }}
        set COMPCODE=${{ matrix.testprefix }}${{ matrix.testsuffix }}
        set PATH=D:\a\_temp\msys\msys64\mingw64\bin;..\wx\lib\gcc810_x64_dll;%path%
        echo PATH is %PATH%
        echo CRYSDIR is %CRYSDIR%
        ren ${{ matrix.testprefix }}${{ matrix.testsuffix }}.org safe.dir
        for /d %%G in ("*.org") do rd /s /q "%%~G"      
        ren safe.dir ${{ matrix.testprefix }}${{ matrix.testsuffix }}.org 
        ${{ matrix.removeguitst }}
        mkdir script
        echo "%SCRIPT NONE" > script\\tipauto.scp
        echo "%END SCRIPT" >> script\\tipauto.scp
        echo "%SCRIPT NONE" > script\\guideauto.scp
        echo "%END SCRIPT" >> script\\guideauto.scp
        perl testsuite.pl  ${{ matrix.testoption }}
#
    - name: Test CRYSTALS linux
      working-directory: test_suite
      if: matrix.os == 'ubuntu-latest'
# Prevent interactive scripts from running
# Prevent gui test from running for this cl version
# Setup environment
# Compcode sets folder with reference test outputs
# Go
      timeout-minutes: 10
      run: |
        mkdir script
        ${{ matrix.removeguitst }}
        export COMPCODE=${{ matrix.testprefix }}${{ matrix.testsuffix }}
        export CRYSDIR=${{ matrix.crysdir }}
        echo CRYSDIR is $CRYSDIR
        echo PATH is $PATH
        mv ${{ matrix.testprefix }}${{ matrix.testsuffix }}.org safe.dir
        rm -Rf *.org
        mv safe.dir ${{ matrix.testprefix }}${{ matrix.testsuffix }}.org 
        echo "%SCRIPT NONE" > script/tipauto.scp
        echo "%END SCRIPT" >> script/tipauto.scp
        echo "%SCRIPT NONE" > script/guideauto.scp
        echo "%END SCRIPT" >> script/guideauto.scp
        ${{ matrix.fbrunner }} perl testsuite.pl ${{ matrix.testoption }}
#
# If failures, save the test outputs for later comparisons
    - name: Upload crystals test outputs
      uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: test-outputs-${{ matrix.oscode }}-${{ matrix.cl }}
        path: test_suite
