#I\USE source#
#PThis command controls the source of commands for CRYSTALS.
 If 'source' is a filename then commands are read from that file.
 If 'source' is LAST ,the current USE file is closed and
 commands are read from the previous level USE file.
 If  'source' is CONTROL  , all USE files open are closed and
 commands are read from the main control
 stream for the job , for example the terminal in an interactive job.
#POne USE
 file may contain other USE commands. The maximum depth of USE
 files  allowed will be installation dependent.
 Note that the USEd file need not be a complete list - it can be as little
 as only one line.
 An indirect file should end with '\USE LAST' , '\USE CONTROL' , or '\FINISH'
 .
 This command is only available in some implementations.



#I\RELEASE  devicename filename#
#PThe file currently open on 'devicename' is closed, and a new file opened
 on that device if necessary. The file just closed can be examined using
 the \TYPE command. The filename parameter is optional. If it is
 specified, the new file will be opened with that name.
#PUseful devices currently available include PRINTER, PUNCH, LOG and MONITOR.



#I\SET FILE type#
#PThis command is used to control the case of file names generated
 by CRYSTALS. Possible values are:
#N   5#
#J
 LOWER        Filenames are converted to all lower case.
 UPPER        Filenames are converted to all upper case.
 MIXED        Filenames are left as input or defined.
#



#YFiles#
#PWhen CRYSTALS runs it stores all crystallographic data in a single file,
by default named crfilev2.dsc. This is a binary file and should not be
opened with any other program.
#PCRYSTALS outputs results and analysis to several places:
#KThe listing file: #
this will be called bfilenn.lis where nn is a number
from 00-99, incremented each time the program is run. When nn reaches 99
this file will be continuously overwritten every time CRYSTALS is run.
#
The listing file contains verbose output about all the calculations that
take place.
#KThe punch file: #
called bfile.pch by default. The idea of 'punching' data
is a throwback to the days of punched cards. This file is used to write out
specific bits of data _i{as _i{commands that can then be read back into the 
program. For example, the parameters defining the crystallographic model 
are stored in CRYSTALS as a 'List 5'. Then 'Punching List 5':
#J
  \PUNCH 5
  END
#
will result in a full \LIST 5 command being written to the file bfile.pch.
You can then recover that version of the model parameters by typing
#J
  \USE bfile.pch
#
which causes the commands written in that file to be executed by CRYSTALS.
#KThe monitor file: #
called bfilenn.mon this is obsolete. If there is any
output in it, it is from a bit of the program that hasn't been looked at
recently.
#KThe log file: #
called bfilenn.log, this contains everything that you typed into CRYSTALS, 
and commands that were issued on your behalf by the menu system or script
processor.
#



#ZTHE CRYSTALS DATABASE#
#HCdatabase#
#Acrysdatabase#
 It is quite possible to use CRYSTALS so that all the data is read from
 text files at the start of every job (as in SHELXL).
 However, for interactive working, it is preferable to establsh a
 database of crystallographic information which can be used whenever it
 is needed. This database is called the CRYSTALS 'disk' file. It is
 usualy a permanent file on the hard disk, and usually has the extension
 '.DSC'.
#J
 It is a direct-access binary file. DO NOT try to print or edit it.
#PThe data is organised in this file as lists, corresponding to the
 external user-input lists. In modern terminology, these 'lists' 
 would be called 'objects' or 'data structures'. Each list groups
 together related information, e.g. the cell parameters, the atoms, 
 the reflections etc.
# While in general input of a list will
 overwrite a previous version, for the atomic coordinate list (LIST 5, 
 see section #RLIST05#) a
 new version is added to the database. In the event that a refinement
 goes wrong, the user can usually recover an earlier version of the
 structure.
#PIn the  CRYSTALS  system, most of the data required to refine
 a crystal structure must be input to the computer as ASCII,
 translated into an internal format and stored on a random access
 disk file. On the disk, different types of data are recorded
 separately, in what are called  LISTS. Each list holds only one
 type of crystallographic information and is identified by a number
 called the 'list type number'.
#PNormally, each structure uses a separate disk file, which is preserved
 between different jobs and updated whenever a program generates some
 new data. This means that several different versions of a given list
 may be produced during the course of a structure analysis.
 In order that each list may be uniquely identified, every list has
 associated with it a second number, called the 'list serial number'.
 To specify unambiguously a list that is stored in the database,
 it is necessary to know both the relevant list type number
 and the list serial number.
#PIn most cases, however, the version of a given list that is required
 is the latest list of that type to be created.
 Accordingly, an index called the 'current list index' is maintained,
 which contains an entry for the latest version of each list.
 When a program requires information about the current version of a
 list, it accesses the current list index.
#PAs well as an index of the current version of each list,
 a second index is kept, called the 'file index'.
 For each disk file, this latter index contains the information for every
 list that is present in the database.
 This index is always checked when a list is written to the database,
 to ensure that its list type number and list serial number refer to only
 one list.
#PFor a user, the major advantage of splitting the input data into
 logical units in the database is that, for any run, only those lists which
 need to be changed have to be re-input to the database.
 New versions of each list that are generated by programs are
 automatically output to the database so that, provided the database file
 is not
 destroyed or erased, it is probable that each run will contain
 only control commands.
 For example, during a structure factor least squares calculation
 a new set of  Fcalcs  and a new normal matrix will be generated and
 stored in the database ready for further calculations.
#Arichtest#
#POld versions of a list may be reused, provided that they have not been
 overwritten or deleted, by finding the relevant entry in the file index
 and copying it into the current list index.
#P
 The database contains two indices which control access to it.
#ICurrent List Index#
#PThis index contains the serial numbers of each list to be used in
 calculations. This index is updated whenever a list is written to
 database.



