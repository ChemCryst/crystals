%SCRIPT YGETSIG 
%%    read internal and external sigmas from the SIGMAS.DAT files
%%    called from XVARIANCE.SSC and XVARIANCE2
%     VARIABLE REAL INTERNAL EXTERNAL WT SS SX SY SXX SXY 
%     VARIABLE REAL GRADIENT  INTERCEPT NREFMES 
%     VARIABLE INTEGER JSTEP HINDEX KINDEX LINDEX
%     VARIABLE LOGICAL SIG SIG2 SIG3
%     VARIABLE INTEGER NSIGMAS NITEMS STEP
%     VARIABLE REAL ZERO 
%     EVALUATE ZERO = 0.
%     IF SIG THEN 
 Opening sigmas.dat
%        COPY '#OPEN SCPDATA sigmas.dat' 
%%       Skip first  line:                                                      
%        EXTRACT NEXT
%     ELSE IF SIG3 THEN
 Opening sigmas3.dat
%        COPY '#OPEN SCPDATA data/sigmas3.dat' 
%%       Skip first 2 lineS:                                                      
%        EXTRACT NEXT
%        CLEAR
%        EXTRACT NEXT
%     ELSE IF SIG2 THEN
 Opening sigmas2.dat
%        COPY '#OPEN SCPDATA data/sigmas2.dat' 
%%       Skip first 2 lineS:                                                      
%        EXTRACT NEXT
%        CLEAR
%        EXTRACT NEXT
%     END IF
%     IF NREFMES .GE. 10000. THEN
%        EVALUATE JSTEP = 500
%     ELSE
%        EVALUATE JSTEP = 200
%     END IF
%     LOOP
%      EVALUATE STEP = LOOPCOUNTER MOD  JSTEP 
%      IF STEP .EQ. 0 THEN
%       TRANSFER '^^CO SET _MW_SOFAR TEXT ' // CHARACTER LOOPCOUNTER TO DISPLAY                                                                         
%      END IF
%      ON ERROR TERMINATE                                                           
%      ON END TERMINATE
%      EXTRACT NEXT                                                             
%      CLEAR                                                                        
%      EXTRACT TRANSFER INPUT                                                       
%      CLEAR
%%     get  fifth, sixth and seventh items
%      GET NOSTORE NOPROMPT INTEGER  ' ' '0'  
%      EVALUATE HINDEX = VALUE
%      GET NOSTORE NOPROMPT INTEGER ' ' '0'  
%      EVALUATE KINDEX = VALUE
%      GET NOSTORE NOPROMPT INTEGER ' ' '0'  
%      EVALUATE LINDEX = VALUE
%      GET NOSTORE NOPROMPT REAL ' ' '-1.0'                                         
%      GET NOSTORE NOPROMPT REAL ' ' '-1.0'  
%      EVALUATE EXTERNAL = VALUE                                        
%      GET NOSTORE NOPROMPT REAL ' ' '-1.0' 
%      EVALUATE INTERNAL = VALUE                                        
%      GET NOSTORE NOPROMPT INTEGER ' ' '1' 
%      EVALUATE NITEMS = VALUE  
%      IF SIG2 THEN
%% skip the 8th item
%        GET NOSTORE NOPROMPT REAL ' ' '-1.0' 
%      ELSE IF SIG3 THEN
%% Skip 8 and 9
%        GET NOSTORE NOPROMPT REAL  ' ' '-1.0' 
%      END IF
%%
%      CLEAR
%      INSERT !^^PL LABEL '!   
%      STORE FORMAT /(I3)/ LENGTH 3 INTEGER HINDEX
%      STORE FORMAT /(I3)/ LENGTH 3 INTEGER KINDEX
%      STORE FORMAT /(I3)/ LENGTH 3 INTEGER LINDEX
%      STORE FORMAT /(A6)/ LENGTH 6 CHARACTER ' MoO= '
%      STORE FORMAT /(I3)/ LENGTH 3 INTEGER NITEMS
%      INSERT !' DATA !
%      IF NITEMS .LT. 6 THEN
%       STORE FORMAT /(F10.2)/ LENGTH 10 REAL EXTERNAL
%       STORE FORMAT /(F10.2)/ LENGTH 10 REAL INTERNAL
%       STORE FORMAT /(F10.2)/ LENGTH 10 REAL ZERO
%       STORE FORMAT /(F10.2)/ LENGTH 10 REAL ZERO
%      ELSE
%       STORE FORMAT /(F10.2)/ LENGTH 10 REAL ZERO
%       STORE FORMAT /(F10.2)/ LENGTH 10 REAL ZERO
%       STORE FORMAT /(F10.2)/ LENGTH 10 REAL EXTERNAL
%       STORE FORMAT /(F10.2)/ LENGTH 10 REAL INTERNAL
%      END IF
%      IF NITEMS .GE. 5 THEN     %set to same values as moo in reductio.F
%        OUTPUT
%        EVALUATE WT = REAL ( NITEMS )
%        EVALUATE SS = SS +  WT
%        EVALUATE SX = SX +  EXTERNAL * WT
%        EVALUATE SY = SY +  INTERNAL * WT
%        EVALUATE SXX = SXX + EXTERNAL * EXTERNAL * WT
%        EVALUATE SXY = SXY + EXTERNAL * INTERNAL * WT
%        EVALUATE NSIGMAS = NSIGMAS + 1
%      END IF
%%
%     END LOOP
%%    prepare to compute points for unit slope.
%     VARIABLE REAL XBAR YBAR
%     EVALUATE XBAR = SX / SS
%     EVALUATE YBAR = SY / SS
%     IF ( YBAR .GT. XBAR ) THEN
%            EVALUATE XBAR = YBAR
%     END IF
%% We really need max(x,y) but too slow to compute in a SCRIPT
%     IF NSIGMAS .GE. 50 THEN             %If only a few,take their centre
%           EVALUATE XBAR = 3.0 *  XBAR  % otherwise extend the range.
%     END IF
%     
%%  add A SERIES FOR STRAIGHT LINE (y=x) 
%     CLEAR
%     INSERT  !^^PL ADDSERIES 'Unit Slope' TYPE LINE!
%     OUTPUT
%     CLEAR
%     INSERT  !^^PL  DATA 0 0 !
%     OUTPUT
%     CLEAR
%     INSERT !^^PL DATA !
%     STORE FORMAT /(F10.2)/ LENGTH 10 REAL XBAR
%     STORE FORMAT /(F10.2)/ LENGTH 10 REAL XBAR
%     OUTPUT
%%
%     TRANSFER '^^CO SET _MW_USED TEXT ' // CHARACTER NSIGMAS TO DISPLAY                             
%     IF ( NSIGMAS .GT. 1 ) THEN
%% Intercept and gradient in y=a+bx.  Unsafe if few refelctions
%      EVALUATE INTERCEPT = ( SXX * SY - SX * SXY ) / ( SS * SXX - SX * SX )
%      EVALUATE GRADIENT = ( SS * SXY - SX * SY ) / ( SS * SXX - SX * SX )
%% SHOW INTERCEPT GRADIENT
%% gradient only in y=bx. Unsafe if x or y has a significant bias
%      EVALUATE GRADIENT = SXY / SXX   
%% SHOW GRADIENT
%      evaluate gradient = 0.01 * real ( nint ( 100. * gradient ) )
%      TRANSFER '^^CO SET _MW_GRAD TEXT ' // CHARACTER GRADIENT TO DISPLAY                             
%     ELSE
{E Insufficient equivalent reflections for variance plot in "sigmas2.dat" 
%      TRANSFER '{E   ' //  CHARACTER NSIGMAS // ' equivalents found' TO DISPLAY
%     END IF                                                                          
%%
%     COPY '#CLOSE SCPDATA'
%END SCRIPT
