<!-- XTLVAR title="The Crystals Database" -->
<!-- XTLVAR comment="The Crystals Database" -->
<!-- XTLVAR cvssource="manual/crystals.man" -->
<H1>Crystals Manual</H1>
<H2>Chapter 3: The Crystals Database</H2>
<DL><DT>
<DD><A HREF="crystalsmanual-database.html#database.listcontrol">3.1: General List-control Directives  -  \DISK</A><br>
<DD><A HREF="crystalsmanual-database.html#database.purge">3.2: Elimination of Old Versions of LISTS  -  \PURGE</A><br>
<DD><A HREF="crystalsmanual-database.html#database.lists">3.3: LISTS in Current use</A><br>
<DD><A HREF="crystalsmanual-database.html#database.summary">3.4: Printed Summary of Data lists</A><br>
<DD><A HREF="crystalsmanual-database.html#database.atomsyn">3.5: Element and Atom names</A><br>
<DD><A HREF="crystalsmanual-database.html#database.foreign">3.6: Foreign Program Links</A><br>
</DL>

<A NAME="crysdatabase"> </A>
 It is quite possible to use CRYSTALS so that all the data is read from
 text files at the start of every job (as in SHELXL).
 However, for interactive working, it is preferable to establsh a
 database of crystallographic information which can be used whenever it
 is needed. This database is called the CRYSTALS 'disk' file. It is
 usualy a permanent file on the hard disk, and usually has the extension
 '.DSC'.
<pre>
 It is a direct-access binary file. DO NOT try to print or edit it.
</pre><p><P>The data is organised in this file as lists, corresponding to the
 external user-input lists. In modern terminology, these 'lists' 
 would be called 'objects' or 'data structures'. Each list groups
 together related information, e.g. the cell parameters, the atoms, 
 the reflections etc.
<BR> While in general input of a list will
 overwrite a previous version, for the atomic coordinate list (LIST 5, 
 see section !elabel!LIST05!) a
 new version is added to the database. In the event that a refinement
 goes wrong, the user can usually recover an earlier version of the
 structure.
<P>In the  CRYSTALS  system, most of the data required to refine
 a crystal structure must be input to the computer as ASCII,
 translated into an internal format and stored on a random access
 disk file. On the disk, different types of data are recorded
 separately, in what are called  LISTS. Each list holds only one
 type of crystallographic information and is identified by a number
 called the 'list type number'.
<P>Normally, each structure uses a separate disk file, which is preserved
 between different jobs and updated whenever a program generates some
 new data. This means that several different versions of a given list
 may be produced during the course of a structure analysis.
 In order that each list may be uniquely identified, every list has
 associated with it a second number, called the 'list serial number'.
 To specify unambiguously a list that is stored in the database,
 it is necessary to know both the relevant list type number
 and the list serial number.
<P>In most cases, however, the version of a given list that is required
 is the latest list of that type to be created.
 Accordingly, an index called the 'current list index' is maintained,
 which contains an entry for the latest version of each list.
 When a program requires information about the current version of a
 list, it accesses the current list index.
<P>As well as an index of the current version of each list,
 a second index is kept, called the 'file index'.
 For each disk file, this latter index contains the information for every
 list that is present in the database.
 This index is always checked when a list is written to the database,
 to ensure that its list type number and list serial number refer to only
 one list.
<P>For a user, the major advantage of splitting the input data into
 logical units in the database is that, for any run, only those lists which
 need to be changed have to be re-input to the database.
 New versions of each list that are generated by programs are
 automatically output to the database so that, provided the database file
 is not
 destroyed or erased, it is probable that each run will contain
 only control commands.
 For example, during a structure factor least squares calculation
 a new set of  Fcalcs  and a new normal matrix will be generated and
 stored in the database ready for further calculations.
<A NAME="richtest"> </A>
<P>Old versions of a list may be reused, provided that they have not been
 overwritten or deleted, by finding the relevant entry in the file index
 and copying it into the current list index.
<P>
 The database contains two indices which control access to it.
</div>
<div class="instruction"><strong><u>Current List Index</u></strong><br>
<P>This index contains the serial numbers of each list to be used in
 calculations. This index is updated whenever a list is written to
 database.
</div>
<div class="instruction"><strong><u>Disk Index</u></strong><br>
<P>This is an index of all the lists contained in the database. When a
 new list is added to the database, its internal address is added to this
 index, and also inserted into the current disk index. It is possible to
 copy address from this index to the current disk index, thus changing
 the currently active version of a list.
<BR>
<BR>&nbsp;<BR>
<A NAME="\Disk"> </A>
<A NAME="Retreiving old data lists"> </A>
<HR><small><A HREF="crystalsmanual-database.html">[Top]</A> <A HREF="manindex.html">[Index]</A> Manuals generated on Friday 5 July 2024</small>
<CENTER><H3><A NAME="database.listcontrol">3.1: General List-control Directives  -  \DISK</A></H3></CENTER>

<P>The list control table can be marked and used in various ways with this
 command.
<pre>
 \DISK
 PRINT INDEX= PUNCH= LIST=
 MARKERROR LIST= SERIAL= RELATIVE= ACTION=
 RETAIN LIST= SERIAL= RELATIVE= ACTION=
 DELETE LIST= SERIAL= RELATIVE= ACTION=
 RESET LIST= SERIAL= RELATIVE=
 USAGE LIST= SERIAL= RELATIVE= FLAG=
 EXTEND RECORDS= FREE= TRIES= SIZE=
 CHECK
 END
</pre><p><BR>
For example:
<pre>
 \DISK
 \  Print the current list index
 PRINT INDEX=CURRENT
 \ Print the index containing all the lists stored
 \ on the disk
 PRINT INDEX=DISK
 \ Reset LIST 5 (the model parameters) to the one with serial number 4
 RESET 5 4
 \ Reset LIST 10 (Fourier peaks) to the 'current serial number - 1'
 RESET 10 0 -1
 \ Retain LIST 5 with serial number 6 when the disk
 \ is purged
 RETAIN 5 6
 \ Delete current LIST 11 (normal/inverted least squares matrix)
 DELETE 11
 END
</pre><p><BR>
<div class="instruction"><strong><u>\DISK</u></strong><br>
<P>This is the command which initiates the
 routines to modify the list control table.
 The directives MARKERROR,
 DELETE, RETAIN, USAGE, and RESET all accept the parameters
 SERIAL and RELATIVE.
 The parameters  SERIAL  and  RELATIVE  should not both
 be changed from their default settings on the same directive.
<P>All directives are executed immediately after they have been entered.
<div class="directive"><strong><i>PRINT INDEX=</i></strong>
<P>This directive causes one of the indexes to be printed.
<div class="parameter"><i>INDEX=</i>
<pre>
      CURRENT  -  default value
      DISK
      SUMMARY
</pre><p><BR>
 If  'INDEX'  is  'CURRENT', the current list index is
 printed (i.e. the index containing the current version of each
 list stored).
 If  'INDEX'  is  'DISK', the index containing information about all
 the lists stored on the disk is printed.
 If 'INDEX' is 'SUMMARY', a summary of the usage of the disk file is printed.
</div>
<div class="parameter"><i>PUNCH=</i>
<pre>
      NO  -  default value
      YES
</pre><p><BR>
 Writes a machine readable summary of whatever is selected by INDEX to
 the currently open PUNCH file.
</div>
<div class="parameter"><i>LIST=</i>
<pre>
      0  -  default value
      n
</pre><p><BR>
By default (0) all lists are printed or punched. If you specify an
alternative value for the LIST parameter, then only information about
that list number is output.
<A NAME="MARKERROR"> </A>
</div>
</div>
<div class="directive"><strong><i>MARKERROR LIST= SERIAL= RELATIVE= ACTION=</i></strong>
<P>This directive can either mark a specified type of list as an 'error
 list', or alternatively, such a mark can be removed from the list control
 table.
<div class="parameter"><i>LIST=n</i>
 'n' is the list type number (there is no default value).
</div>
<div class="parameter"><i>SERIAL=n</i>
 'n' is the list serial number. The default value is zero, which
 represents the serial number of the current list of this type.
</div>
<div class="parameter"><i>RELATIVE=n</i>
 'n' is the offset applied to the serial. The default value
 is 0. If both SERIAL and RELATIVE are zero (the defaults) 
 the current list of the specified type will be 
 the one that is marked.
</div>
<div class="parameter"><i>ACTION=</i>
<pre>
      NO
      YES  -  default value
</pre><p><BR>
 If  ACTION is  NO , the entry in the list control table for the list type
 specified is altered so that it is not marked as an 'error list'.
 If  ACTION is  YES, the entry in the list control
 table for the list type specified is altered so that it is marked as an
 'error list'. If a program attempts to use such a list, an error is
 reported, and the job terminated.
<BR>
</div>
</div>
<div class="directive"><strong><i>RETAIN LIST= SERIAL= RELATIVE= ACTION=</i></strong>
<P>With this directive, certain old versions of specified lists can be
 retained when the disk file is  PURGED  (see !elabel!PURGE!).
<div class="parameter"><i>LIST=n</i>
 'n' is the list type number (there is no default value).
</div>
<div class="parameter"><i>SERIAL=n</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
<div class="parameter"><i>RELATIVE=</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
<div class="parameter"><i>ACTION=</i>
<pre>
      NO
      YES  -  default value
</pre><p><BR>
 If  'ACTION'  is  'YES', the list with the specified
 type and serial number will be retained when the disk file is  PURGED.
 If  'ACTION'  is  'NO' , the particular list will be deleted when the
 disk file is  PURGEd (see section !elabel!PURGE!).
</div>
</div>
<div class="directive"><strong><i>DELETE LIST= SERIAL= RELATIVE= ACTION=</i></strong>
<P>With this directive certain lists can be deleted from the file index.
<div class="parameter"><i>LIST=</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
<div class="parameter"><i>SERIAL=</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
<div class="parameter"><i>RELATIVE=</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
<div class="parameter"><i>ACTION=</i>
<pre>
      NO
      YES  -  default value
</pre><p><BR>
 If  'ACTION'  is  'YES', the list with the specified
 serial number will be marked to be deleted from the file when the
 file is PURGED.
 If  ACTION  is  'NO' , the specified list will not be marked as one to
 be deleted when the disk file is  PURGEd (see section !elabel!PURGE!).
<A NAME="RESET"> </A>
</div>
</div>
<div class="directive"><strong><i>RESET LIST= SERIAL= RELATIVE=</i></strong>
 This directive alters the entry for the list type in the
 current list index.
<div class="parameter"><i>LIST=</i>
 This parameter is the list type number,
 for which there is no default value.
</div>
<div class="parameter"><i>SERIAL=</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
<div class="parameter"><i>RELATIVE=</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
</div>
<div class="directive"><strong><i>USAGE LIST= SERIAL= RELATIVE= FLAG=</i></strong>
 This directive alters the list write/overwrite flag.
<div class="parameter"><i>LIST=n</i>
 'n' is the list type number
 (there is no default value).
</div>
<div class="parameter"><i>SERIAL=</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
<div class="parameter"><i>RELATIVE=</i>
 See markerror definition above (!elabel!MARKERROR!).
</div>
<div class="parameter"><i>FLAG=</i>
<pre>
      OVERWRITE
      READY
      UPDATE  -  default value.
</pre><p><BR>
</div>
</div>
<div class="directive"><strong><i>EXTEND RECORDS= FREE= TRIES= SIZE=</i></strong>
 This directive 
 allows the user to extend the database by a specified number
 of records, and to control the auto-extension. On modern
 platforms the extension of the database is automatic by
 default.
<div class="parameter"><i>RECORDS=</i>
 This parameter specifies a number of records to be added to the
 file. The default value is zero i.e. no records are added.
</div>
<div class="parameter"><i>FREE=</i>
 This parameter specifies a number of records that must be available
 for use in the file. The file will be extended until there are at
 least 'FREE' records unused after the next free disk address.
</div>
<div class="parameter"><i>TRIES=</i>
 This is the number of times the system may try adding 'SIZE' records to
 the disk file to achieve enough space for the current operation. Usual
      default is 1.
</div>
<div class="parameter"><i>SIZE=</i>
 This is the size, in records, that the system will increase the disk by
 to try to accommodate the current operation. The usual default is 5.
 If the write still fails after TRIES x SIZE records have been added it 
 produces an error. Setting SIZE to zero enables uncontrolled
 extension of the disk file. This is the default, but if the
 user gets carried away doing crystallography, they may fill their 
 disk.
<BR>
</div>
</div>
<div class="directive"><strong><i>CHECK</i></strong>
 This directive checks the integrity of the disk file. It takes
 no parameters.
<div class="parameter"><i>Errors in the DISK file.</i>
 If CRYSTALS
 reports errors in the disk file, run this utility to get a list of those
 LISTS corrupted. Use \PUNCH 5, \PUNCH 12 and \PUNCH 16 to make ASCII
 copies of these important lists (by default output to the 'punch' 
 file, bfile.pch - rename it after punching to e.g. 'savedlists.pch'). 
 If the final version 
 of a list is corrupt, use \DISK RESET (see above !elabel!RESET!) to point 
 the program 
 to an earlier version and punch that instead.
 If the disk file becomes totally
 unusable, delete it, read in the reflections again, and then read in
 these 'punched' lists (\USE savedlists.pch).
<BR>
 If only certain lists are unusable,
 use the DELETE directive in \DISK to mark defective LISTS for
 deletion, and then use \PURGE NEW to create a new disk file (by 
 default new.dsc). Rename new.dsc to crfilev2.dsc to make CRYSTALS 
 open it by default when it starts in that directory.

<pre>
 The following lists can always safely be deleted since CRYSTALS creates
 new ones automatically.
</pre><p><BR> 10 Fourier peaks (section !elabel!LIST10!).
<BR> 11 Normal matrix (section !elabel!LIST11!).
<BR> 20 Saved geometrical transformation matrices (section !elabel!LIST20!).
<BR> 22 Constraints in internal format (section !elabel!LIST22!).
<BR> 24 Least squares shift list (section !elabel!LIST24!).
<BR> 26 Restraints in internal format (section !elabel!LIST26!).
<BR> 33 SFLS command in internal format (section !elabel!SFLS!).
<BR> 36 List dependency tracking (not documented).
<BR>
<BR> See section !elabel!LISTS! for all the list definitions.
<BR>
<P>Example 1

<pre>
Imagine that the current versions of LIST 5 (the model parameters) 
and LIST 29 (element properties) have beome corrupt.
We will also delete any recreatable lists.

      \DISK
      \  Check the index
      CHECK
      \  Delete current version of atomic params
      DEL 5
      \  Point index to the previous version
      RESET 5 0 -1
      \  Remove corrupt and safe-to-delete lists:
      DEL 29
      DEL 10
      DEL 11
      DEL 20
      DEL 22
      DEL 24
      DEL 26
      DEL 33
      DEL 36
      END
      \  Open a new file save.dat on the 'PUNCH device'.
      \  Release is equivalent to CLOSE followed by OPEN.
      \RELEASE PUNCH SAVE.DAT
      \  Output the important data lists:
      \PUNCH 5
      END
      \PUNCH 12
      END
      \PUNCH 16
      END
      \  Write a new database called rescue.dsc with only the 
      \  current index of lists in it:
      \PURGE RESCUE
      \  Close CRYSTALS
      \FINISH
</pre><p><BR>
 At this point it would be useful on a stand-alone computer to
 run a system utility (e.g. SCANDISK on a PC) to check the integrity of
 the computers hard disk, since CRYSTALS rarely corrupts the disk itself.
<BR>
 One would then open a command prompt in the working folder and do this:
<pre>
      del crfilev2.dsc
      ren rescue.dsc crfilev2.dsc
</pre><p><BR>
 Now restart CRYSTALS in the same folder. Recover the important saved 
 data by typing:
<pre>
      \USE save.dat
</pre><p><BR>
<BR>
<A NAME="Purge"> </A>
<A NAME="Shrinking the contents of a dsc file"> </A>
</div>
</div>
</div>
<HR><small><A HREF="crystalsmanual-database.html">[Top]</A> <A HREF="manindex.html">[Index]</A> Manuals generated on Friday 5 July 2024</small>
<CENTER><H3><A NAME="database.purge">3.2: Elimination of Old Versions of LISTS  -  \PURGE</A></H3></CENTER>
<A NAME="PURGE"> </A>

<pre>
 \PURGE FILE= INITIALSIZE= LOG= LIST=
 ACTION REOPEN=
 END
</pre><p><BR>
<div class="instruction"><strong><u>\PURGE</u></strong><br>
<P>This command deletes all but the current
 version of each list, and any lists explicitly marked to be deleted,
 except for lists marked to be retained,
 and then rewrites the disk file
 so that the space occupied by the old deleted lists is overwritten.
 This operation does not normally shorten the file physically (see parameter
 FILE below for a method of doing this) , but frees
 a lot of space that can be reused.
 The optional parameters 'FILE' and 'INITIALSIZE' (available
 in some implementations
 only), allow the user to create a new file with only the current
 version of each list in it. This file may be smaller than the
 original disk file.
<div class="parameter"><i>FILE=</i>
<pre>
      OLD - default value
      name - The root to be used form the new database - name.DSC
      DATE - The root name is generated by CRYSTALS from the date and
             time.
</pre><p><BR>
<P>This parameter controls whether a new file is created. If the value
 specified is not OLD, a new file will be created containing only the
 current versions of each list, and any which are marked to be retained.
 The program automatically extends the file to the size required for all
 the lists to be retained. This new file has the extension .DSC,
 and may be used in future CRYSTALS tasks.
</div>
<div class="parameter"><i>INITIALSIZE=</i>
<P>This parameter is used to specify an initial size for a new file. If
 a new file is not to be created, the value is ignored. The default
 value of zero causes the new file to have the smallest size necessary
 to contain all the copied lists.
</div>
<div class="parameter"><i>LOG=</i>
<pre>
      OFF - default value
      ON
</pre><p><BR>
<P>If the value 'ON' is given for this parameter, the types and serial
 numbers of all lists deleted because they were old versions are listed.
 The types and serials of all lists not copied for other reasons, e.g.
 deleted lists, and lists which are marked as being updated, are always
 listed
</div>
<div class="parameter"><i>LIST = n</i>
<P>'n' is the type of list to be purged from the database, all old versions 
of all other lists are preserved. If 'n' is 0 (the default value)
lists of all types are purged.
<BR>
</div>
<div class="parameter"><i>ACTION REOPEN=</i>
<pre>
    YES
    NO
</pre><p><BR>
<P>YES attaches the newly constructed .dsc file on NCDFU after the purge and
 closes the old one. It does it at the point in xpurge that refreshes all
 the indexes after a normal purge
<BR>
 This will allow us to use a 'Save As...' type of behaviour that users will
 expect, but without having to restart the current CRYSTALS process.
<P>NO Leaves the user accessing the current dsc file.
<BR>&nbsp;<BR>

<A NAME="Lists overview"> </A>
</div>
</div>
<HR><small><A HREF="crystalsmanual-database.html">[Top]</A> <A HREF="manindex.html">[Index]</A> Manuals generated on Friday 5 July 2024</small>
<CENTER><H3><A NAME="database.lists">3.3: LISTS in Current use</A></H3></CENTER>
<A NAME="LISTS"> </A>

Lists marked * cannot be directly input by the User

<BR>   List Number     Type of data
<BR>
<BR>     1    Cell parameters (section !elabel!LIST01!)
<BR>     2    Unit cell symmetry (section !elabel!LIST02!)
<BR>     3    Atomic scattering factors (section !elabel!LIST03!)
<BR>     4    Weighting parameters (section !elabel!LIST04!)
<BR>     5    The model parameters (section !elabel!LIST05!)
<BR>     6    Reflection data (section !elabel!LIST06!)
<BR>     7    Reflection data not used for refinement (section !elabel!LIST07!)
<BR>     9*   ESDs of model parameters (section !elabel!LIST9!)
<BR>    10    Peak coordinates from Fourier (section !elabel!LIST10!)
<BR>    11    Least squares matrix (section !elabel!LIST11!)
<BR>    12    Refinement directives (section !elabel!LIST12!)
<BR>    13    Crystal and collection data (section !elabel!LIST13!)
<BR>    14    Fourier directives (section !elabel!LIST14!)
<BR>    16    General Restraints (section !elabel!LIST16!)
<BR>    17    Special Restraints (section !elabel!LIST17!)
<BR>    18    SMILEs string representation (section !elabel!LIST18!)
<BR>    20*   Transformation matrices saved by \GEOMETRY (section !elabel!LIST20!)
<BR>    22*   Refinement directives in internal format (section !elabel!LIST22!)
<BR>    23    Structure factor control list (section !elabel!LIST23!)
<BR>    24*   Least squares shift list (section !elabel!LIST24!)
<BR>    25    Twin component operators (section !elabel!LIST25!)
<BR>    26*   Constraints in internal format (section !elabel!LIST26!)
<BR>    27    Diffractometer scales (section !elabel!LIST27!)
<BR>    28    Reflection condition/filter list (section !elabel!LIST28!)
<BR>    29    Contents of asymmetric unit and elemental properties (section !elabel!LIST29!)
<BR>    30    General information (section !elabel!LIST30!)
<BR>    31    Cell parameter E.S.D.'s (section !elabel!LIST31!)
<BR>    33*   Internal - Refinement control (last SFLS command, see !elabel!SFLS!)
<BR>    36*   Tracking interdependencies of parameters, normal matrix, weights etc.
<BR>    40    Bond forming/breaking directives (section !elabel!LIST40!)
<BR>    41*   Bonds between atoms (section !elabel!LIST41!)
<BR>
<A NAME="\Summary"> </A>
<HR><small><A HREF="crystalsmanual-database.html">[Top]</A> <A HREF="manindex.html">[Index]</A> Manuals generated on Friday 5 July 2024</small>
<CENTER><H3><A NAME="database.summary">3.4: Printed Summary of Data lists</A></H3></CENTER>

<pre>
   \SUMMARY OF= TYPE= LEVEL=
   END
</pre><p><BR>
For example:
<pre>
   \  Detailed list of model parameters:
   \SUMMARY OF=LIST TYPE=5 LEVEL=HIGH
   END

   \  Again, but less typing:
   \SUM L 5 HI
   END

   \  Summary of reflection data:
   \SUM L 6
   END
</pre><p><BR>
<div class="instruction"><strong><u>\SUMMARY OF= TYPE= LEVEL=</u></strong><br>
<div class="directive"><strong><i> </i></strong>
<div class="parameter"><i>OF=</i>
<P>This parameter determines the extent of the data summary.
<pre>
      LIST
      EVERYTHING
</pre><p><BR>
<P>If 'LIST' is specified, a summary of a specific list whose type is
 given by the 'TYPE' parameter is produced. If 'EVERYTHING' is specified,
 a summary of all current lists for which summaries are available is
 produced. If 'OF = EVERYTHING' is
 specified, the value of 'TYPE' is ignored.
</div>
<div class="parameter"><i>TYPE=</i>
<P>This parameter indicates the
 list type for which a summary is required. If a summary of this list
 type is not available, a warning message will be printed.
<BR>
</div>
<div class="parameter"><i>LEVEL=</i>
<pre>
      LOW
      MEDIUM
      HIGH
</pre><p><BR>
This parameter has three values which indicate the level of detail
 required in the data summary. The parameter is ignored unless the list
 type is 5 or 10.

<pre>
 List      Level   Data printed
 ----      -----   ---- -------
 5 or 10  LOW     Atom names
 5 or 10  MEDIUM  Atom names and positional parameters
 5 or 10  HIGH    All atomic and overall parameters
</pre><p><BR>
<A NAME="Atom name syntax"> </A>
</div>
</div>
</div>
<HR><small><A HREF="crystalsmanual-database.html">[Top]</A> <A HREF="manindex.html">[Index]</A> Manuals generated on Friday 5 July 2024</small>
<CENTER><H3><A NAME="database.atomsyn">3.5: Element and Atom names</A></H3></CENTER>
<A NAME="ATOMSYNTAX"> </A>

<BR>&nbsp;<BR>
<div class="instruction"><strong><u>Element Names</u></strong><br>
<P>Elements are specified by a name, called the atom <strong>TYPE.</strong> The
 'TYPE' is used to associate the refined atoms with atomic properties,
 such as form factors, radii, etc. The TYPE <strong>must</strong> start with a letter,
 and is not case sensitive.
 REMEMBER that 'blank'
 is used as a delimiter in CRYSTALS and so must
 not appear in an atom TYPE. Elements in the form factor list (LIST 3 - see
 section !elabel!LIST03!)
 and the atomic properties (LIST 29 - section !elabel!LIST29!) are associated by 
 their TYPE with atoms in the parameter list (LIST 5). Numeric properties of the
 elements are pre-prepared in the files SCATT, SCATCU, SCATMO and
 PROPERTI(.dat) in the SCRIPT directory (Often CRYSTALS\SCRIPT). The
 'elements' C', C", H' and H" are in these files with the properties of C and H.
 You can define your own element names, but may not use +,- or *.
<BR>&nbsp;<BR>
</div>
<div class="instruction"><strong><u>Atom names</u></strong><br>
 Individual atoms are specified by combining the TYPE with a SERIAL
 number. This is an integer in the range 1-9999. When combined with the
 TYPE, it must be enclosed in parentheses ().
<pre>
   e.g.   C(2) CL(123)
</pre><p><BR>
<BR>&nbsp;<BR>
</div>
<div class="instruction"><strong><u>Symmetry equivalent atoms</u></strong><br>
<P>
 Atoms specified as above correspond exactly to those in the refinable
 atom list (LIST 5). If a symmetry equivalent atom is required, up to 5
 additional items are included inside the parentheses. The full
 specification of an atom is:
<pre>
       TYPE(SERIAL,S,L,Tx,Ty,Tz)
</pre><p><BR>
<BR>&nbsp;<BR>
<div class="directive"><strong><i>S </i></strong>
 is the serial number of the symmetry operator in the stored list of
 space group operators. If negative, it indicates that the atom
 coordinates are first negated before being operated upon. The default is
 1
<BR>&nbsp;<BR>
</div>
<div class="directive"><strong><i>L </i></strong>
 is the serial number of the non-centring lattice translation to be
 used. The default is 1.
<BR>&nbsp;<BR>
</div>
<div class="directive"><strong><i>Tx,Ty,Yz </i></strong>
 are whole cell translations parallel to the cell axes. The
 default is 0.
<P>
 If the value of an item is its default, it may be omitted altogether, though
 its place must be marked by its associated comma. A series of trailing
 commas may also be omitted. For example:

<pre>
       C(99,-1,1,0,0,0) - an atom related by inversion at the origin
                          (assuming x,y,z is the first operator).
       C(99,-1,1,,,0)   - same atom as above, omitting defaults.
       C(99,-1)         - same atom as above, omitting 
                          defaults and trailing commas.
</pre><p><BR>
<P>For more detailed information, see Atomic and
 Structural parameters (section !elabel!atomparams!)
<BR>
<A NAME="External program links"> </A>
</div>
</div>
<HR><small><A HREF="crystalsmanual-database.html">[Top]</A> <A HREF="manindex.html">[Index]</A> Manuals generated on Friday 5 July 2024</small>
<CENTER><H3><A NAME="database.foreign">3.6: Foreign Program Links</A></H3></CENTER>

<div class="instruction"><strong><u>\FOREIGN</u></strong><br>
<P>This command provides links to 'FOREIGN' programs, that is,
 programs which are not part of CRYSTALS, but which provide useful
 functions in providing a complete system. These programs often come
 from other laboratories, and are only distributed with the authors
 permission unless they are public domain. Where practical, we make no
 changes to the original code. We offer little or no support in
 connection with these programs, though usually they are in frequent
 use in Oxford. The linking routine prepares data files for the foreign
 program, and may initiate a subprocess to execute the rogram.
<div class="parameter"><i>PROGRAM=</i>
<pre>
      SNOOPI  - A plotting program using Tektronix 4010 devices.
      CAMERON - An interactive graohics program.
      MULTAN  - Prepares files for MULTAN 84.
      SHELXS  - Prepares files for SHELXS.
      SIRxx   - Prepares files for the SIR direct methods system
</pre><p><BR>
</div>
<div class="parameter"><i>MODE=</i>
<P>This keyword controls the mode of operation of the foreign program.
 It currently only applies to SHELXS and SIR.
<pre>
      NORMAL      - DEFAULT, prepares a default data file with recommended
                    settings.
      DIFFICULT   - Prepares a file with non-default settings.
      PATTERSON   - Prepares a default Patterson calculation (SHELXS only).
      SPECIAL     - Prepares a full SHELX data file (SHELX only)
</pre><p><BR>
</div>
</div>
